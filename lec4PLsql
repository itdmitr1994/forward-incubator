--Задание 1.
insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (100, '192.168.1.1', 'A','Cisco', '0','mac444','чтение','запись','mac444100','1', 'mac444100_1');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (101, '192.168.1.2', 'C','mik', '0','mac555','чтение','запись','mac555101','1', 'mac555101_2');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (102, '192.168.1.3', 'A','mik', '1','mac666','чтение','запись','mac666102','1', 'mac666102_3');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (103, '192.168.1.4', 'B','Cisco', '0','mac777','чтение','запись','mac777103','0', 'mac777103_4');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (104, '192.168.1.5', 'A','D-Link', '0','mac888','чтение','запись','mac888104','1', 'mac888104_5');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (105, '192.168.1.6', 'B','Cisco', '0','mac999','чтение','запись','mac999105','0', 'mac999105_6');

insert into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (106, '192.168.1.7', 'A','D-Link', '0','mac111','чтение','запись','mac111106','1', 'mac111106_7');

CREATE OR REPLACE PACKAGE tesk100 IS
  
  PROCEDURE  inser;
  procedure saveCOMMUTATOR;
  create or replace PROCEDURE getcommutator;
  function check_access_comm;
  function get_remote_id;
  
  END tesk100;
  
  CREATE OR REPLACE package body tesk100 
is 

procedure saveCOMMUTATOR (
              	                                           pV_id in INCB_COMMUTATOR.id_commutator%type,
	                                                   pV_address in INCB_COMMUTATOR.ip_address%type,
	                                                   pV_commutator_type in INCB_COMMUTATOR.id_commutator_type%type,
	                                                   pV_description in INCB_COMMUTATOR.v_description%type,
	                                                   pV_deleted in INCB_COMMUTATOR.b_deleted%type,
	                                                   pID_mac in INCB_COMMUTATOR.v_mac_address%type,
                                                           pV_read in  INCB_COMMUTATOR.v_community_read%type,
                                                           pV_write in INCB_COMMUTATOR.v_community_write%type,
                                                           pV_remote_id in INCB_COMMUTATOR.remote_id%type,
                                                           pV_hex in INCB_COMMUTATOR.b_need_convert_hex%type,
                                                           pV_id_hex in INCB_COMMUTATOR.remote_id_hex %type,
                                                           pACTION in number ) is
l_cnt integer;

begin
 case pAction when 0 then

  select count(1)
    into l_cnt
      from INCB_COMMUTATOR
         where B_DELETED = 0 
           and pV_address=ip_address or pID_mac=v_mac_address;
        if l_cnt!=0 then 
            RAISE_APPLICATION_ERROR(-2002, 'IP адрес или mac адрес не уникален');
        end if;
 
 
 if b_need_convert_hex=1 then
     b_need_convert_hex=pV_hex
     else b_need_convert_hex = 0 then
       b_need_convert_hex  is null   
       end if;
      
     if ip_address is null then RAISE_APPLICATION_ERROR(-2003, 'IP адрес не заполнен');
       end if;
      IF v_mac_address is null then RAISE_APPLICATION_ERROR(-2004, 'mac адрес не заполнен');
        end if;
         IF  remote_id is null then RAISE_APPLICATION_ERROR(-2005, 'Идентификатор коммутатора во внешней среде не заполнен');
         end if;
   
     
          if substr(ip_address,2,1)!='.' or substr(ip_address,3,1)!='.' THEN
                                                                RAISE_APPLICATION_ERROR (-2006, 'IP адрес не верен')
                               else substr(ip_address,2,1)='.' or substr(ip_address,3,1)='.' then 
                                         instr(ip_address,' ')!=0 then
                                                                RAISE_APPLICATION_ERROR (-2007, 'содержит пробелы')
                                                                --дописать содержит только цифры и '.'
                           ;
          end if;
          
INSERT into INCB_COMMUTATOR (id_commutator, ip_address, id_commutator_type,  v_description, b_deleted,  v_mac_address, v_community_read, v_community_write, remote_id, b_need_convert_hex, remote_id_hex )
values (incb_commutator.nextval , pv_address, pV_commutator_type,pV_description,pV_deleted , pID_mac, pV_read, 
pV_read, pV_write,pV_remote_id , pV_hex,  pV_id_hex)
    
when 1 then
    
  select count(1)
    into l_cnt
      from INCB_COMMUTATOR
         where B_DELETED = 0 
           and pV_address=ip_address or pID_mac=v_mac_address;
        if l_cnt!=0 then 
            RAISE_APPLICATION_ERROR(-2002, 'IP адрес или mac адрес не уникален');
        end if;
 
 
 if b_need_convert_hex=1 then
     b_need_convert_hex=pV_hex
     else b_need_convert_hex = 0 then
       b_need_convert_hex  is null   
       end if;
      
     if ip_address is null then RAISE_APPLICATION_ERROR(-2003, 'IP адрес не заполнен');
       end if;
      IF v_mac_address is null then RAISE_APPLICATION_ERROR(-2004, 'mac адрес не заполнен');
        end if;
         IF  remote_id is null then RAISE_APPLICATION_ERROR(-2005, 'Идентификатор коммутатора во внешней среде не заполнен');
         end if; 
      
      update INCB_COMMUTATOR
      set id_commutator=pv_id, 
      ip_address=pv_address, 
      id_commutator_type=pV_commutator_type,
      v_description= pV_description,
      b_deleted=pV_deleted ,
      v_mac_address=pID_mac, 
      v_mac_address=pV_read , 
      v_community_read=pV_read,
      v_community_write=pV_write,
      remote_id=pV_remote_id , 
      b_need_convert_hex=pV_hex,
      remote_id_hex=pV_id_hex
 end if;
 
 when 2 then 
   
   delete from INCB_COMMUTATOR   
  

 end case;
 
 create or replace PROCEDURE getcommutator(pDWR  out sys_refcursor         
                                                           pV_id in INCB_COMMUTATOR.id_commutator%type,
	                                                         pV_address in INCB_COMMUTATOR.ip_address%type,
	                                                         pV_commutator_type in INCB_COMMUTATOR.id_commutator_type%type,
	                                                         pV_description in INCB_COMMUTATOR.v_description%type,
	                                                         pV_deleted in INCB_COMMUTATOR.b_deleted%type,
	                                                         pID_mac in INCB_COMMUTATOR.v_mac_address%type,
                                                           pV_read in  INCB_COMMUTATOR.v_community_read%type,
                                                           pV_write in INCB_COMMUTATOR.v_community_write%type,
                                                           pV_remote_id in INCB_COMMUTATOR.remote_id%type,
                                                           pV_hex in INCB_COMMUTATOR.b_need_convert_hex%type,
                                                           pV_id_hex in INCB_COMMUTATOR.remote_id_hex %type,
                                                           ) is
 
 
 begin 
   open pdwr for
   select * from INCB_COMMUTATOR
   where 
   pV_address = ip_address and  pV_id = id_commutator
 
 
 
 end;
 end task100;
    -------------------------------------------------------------------
    
 --задание 2   
    
function check_access_comm (ip_address varchar2,
                            B_MODE_WRITE number,
                            V_COMMUNITY_READ varchar2,
                            V_COMMUNITY_WRITE varchar2)
  return number 
    is 
 
 
    begin
        
      if B_MODE_WRITE = 1
        when V_COMMUNITY_READ = 'Доступ на чтение'
          else B_MODE_WRITE = 0
            when V_COMMUNITY_WRITE = 'Доступ на запись'
          if end;
       
       EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
         raise_application_error(-20001,'Данные не найдены'); 
    end;
        
    
   -----------------------------------------------------------------------
   
  --задание 3
function get_remote_id(dwr out sys_refcursor, 
                    pV_id in INCB_COMMUTATOR.id_commutator%type)
                  
   is
   begin 
     open dwr for 
     
    with tab as (select remote_id as id, REMOTE_ID_HEX as hex from INCB_COMMUTATOR 
               where B_NEED_CONVERT_HEX = 1 and REMOTE_ID_HEX is null and id_commutator=pV_id )
     select hex from tab;        
      
       EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
         raise_application_error(-20001,'Данные не найдены'); 
         
   end;
